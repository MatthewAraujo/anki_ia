// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: options.sql

package repository

import (
	"context"
)

const getOptionsByQuestionId = `-- name: GetOptionsByQuestionId :many
SELECT id, question_id, option_key, option_text, is_correct
FROM options
WHERE question_id = $1
`

func (q *Queries) GetOptionsByQuestionId(ctx context.Context, questionID int32) ([]Option, error) {
	rows, err := q.db.QueryContext(ctx, getOptionsByQuestionId, questionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Option
	for rows.Next() {
		var i Option
		if err := rows.Scan(
			&i.ID,
			&i.QuestionID,
			&i.OptionKey,
			&i.OptionText,
			&i.IsCorrect,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertOption = `-- name: InsertOption :exec
INSERT INTO options (question_id, option_key, option_text, is_correct)
VALUES ($1, $2, $3, $4)
`

type InsertOptionParams struct {
	QuestionID int32  `json:"question_id"`
	OptionKey  string `json:"option_key"`
	OptionText string `json:"option_text"`
	IsCorrect  bool   `json:"is_correct"`
}

func (q *Queries) InsertOption(ctx context.Context, arg InsertOptionParams) error {
	_, err := q.db.ExecContext(ctx, insertOption,
		arg.QuestionID,
		arg.OptionKey,
		arg.OptionText,
		arg.IsCorrect,
	)
	return err
}
