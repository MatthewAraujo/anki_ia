// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: pdf.sql

package repository

import (
	"context"
	"database/sql"
)

const createPdf = `-- name: CreatePdf :one
INSERT INTO pdfs (user_id, filename, text_content)
VALUES ($1, $2, $3)
RETURNING id, user_id, filename, uploaded_at, status, text_content
`

type CreatePdfParams struct {
	UserID      int32          `json:"user_id"`
	Filename    string         `json:"filename"`
	TextContent sql.NullString `json:"text_content"`
}

func (q *Queries) CreatePdf(ctx context.Context, arg CreatePdfParams) (Pdf, error) {
	row := q.db.QueryRowContext(ctx, createPdf, arg.UserID, arg.Filename, arg.TextContent)
	var i Pdf
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Filename,
		&i.UploadedAt,
		&i.Status,
		&i.TextContent,
	)
	return i, err
}

const getPdfById = `-- name: GetPdfById :one
SELECT id, user_id, filename, uploaded_at, status, text_content
FROM pdfs
WHERE id = $1
`

func (q *Queries) GetPdfById(ctx context.Context, id int32) (Pdf, error) {
	row := q.db.QueryRowContext(ctx, getPdfById, id)
	var i Pdf
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Filename,
		&i.UploadedAt,
		&i.Status,
		&i.TextContent,
	)
	return i, err
}

const getPdfsByUserId = `-- name: GetPdfsByUserId :many
SELECT id, user_id, filename, uploaded_at, status, text_content
FROM pdfs
WHERE user_id = $1
ORDER BY uploaded_at DESC
`

func (q *Queries) GetPdfsByUserId(ctx context.Context, userID int32) ([]Pdf, error) {
	rows, err := q.db.QueryContext(ctx, getPdfsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Pdf
	for rows.Next() {
		var i Pdf
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Filename,
			&i.UploadedAt,
			&i.Status,
			&i.TextContent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStatus = `-- name: UpdateStatus :exec
UPDATE pdfs
SET status = $1
WHERE id = $2
`

type UpdateStatusParams struct {
	Status sql.NullString `json:"status"`
	ID     int32          `json:"id"`
}

func (q *Queries) UpdateStatus(ctx context.Context, arg UpdateStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateStatus, arg.Status, arg.ID)
	return err
}

const updateStatusAndText = `-- name: UpdateStatusAndText :exec
UPDATE pdfs
SET text_content = $1,
    status =$2
WHERE id = $3
`

type UpdateStatusAndTextParams struct {
	TextContent sql.NullString `json:"text_content"`
	Status      sql.NullString `json:"status"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateStatusAndText(ctx context.Context, arg UpdateStatusAndTextParams) error {
	_, err := q.db.ExecContext(ctx, updateStatusAndText, arg.TextContent, arg.Status, arg.ID)
	return err
}
