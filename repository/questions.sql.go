// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: questions.sql

package repository

import (
	"context"
)

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO questions (pdf_id, question_text)
VALUES ($1, $2)
RETURNING id
`

type CreateQuestionParams struct {
	PdfID        int32  `json:"pdf_id"`
	QuestionText string `json:"question_text"`
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createQuestion, arg.PdfID, arg.QuestionText)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getQuestionsByPdfId = `-- name: GetQuestionsByPdfId :many
SELECT id, pdf_id, question_text
FROM questions
WHERE pdf_id = $1
`

func (q *Queries) GetQuestionsByPdfId(ctx context.Context, pdfID int32) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, getQuestionsByPdfId, pdfID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(&i.ID, &i.PdfID, &i.QuestionText); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
